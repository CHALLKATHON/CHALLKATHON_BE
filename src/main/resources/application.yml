spring:
  application:
    name: challkathon-demo
  
  profiles:
    active: dev

  # 데이터베이스 설정
  datasource:
    url: jdbc:mysql://localhost:3306/challkathon_db?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Seoul&allowPublicKeyRetrieval=true
    username: ${DB_USERNAME:root}
    password: ${DB_PASSWORD:password}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 20000
      idle-timeout: 300000
      max-lifetime: 1200000

  # JPA 설정
  jpa:
    hibernate:
      ddl-auto: ${JPA_DDL_AUTO:create-drop}  # 개발: create-drop, 운영: validate
    show-sql: ${JPA_SHOW_SQL:true}
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: true
        use_sql_comments: true
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true

  # OAuth2 설정
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID:your-google-client-id}
            client-secret: ${GOOGLE_CLIENT_SECRET:your-google-client-secret}
            scope:
              - email
              - profile
          
          github:
            client-id: ${GITHUB_CLIENT_ID:your-github-client-id}
            client-secret: ${GITHUB_CLIENT_SECRET:your-github-client-secret}
            scope:
              - user:email
              - read:user
          
          naver:
            client-id: ${NAVER_CLIENT_ID:your-naver-client-id}
            client-secret: ${NAVER_CLIENT_SECRET:your-naver-client-secret}
            client-name: Naver
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - name
              - email
              - profile_image
          
          kakao:
            client-id: ${KAKAO_CLIENT_ID:your-kakao-client-id}
            client-secret: ${KAKAO_CLIENT_SECRET:your-kakao-client-secret}
            client-name: Kakao
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/oauth2/callback/{registrationId}"
            client-authentication-method: POST
            scope:
              - profile_nickname
              - profile_image
              - account_email
        
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
          
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

# JWT 설정
jwt:
  secret: ${JWT_SECRET:mySecretKeyForChallkathonDemo12345678901234567890123456789012345678901234567890}
  access-token-expiration: ${JWT_ACCESS_TOKEN_EXPIRATION:3600000}    # 1시간 (밀리초)
  refresh-token-expiration: ${JWT_REFRESH_TOKEN_EXPIRATION:604800000} # 7일 (밀리초)
  issuer: ${JWT_ISSUER:challkathon-demo}

# 앱 설정
app:
  oauth2:
    authorized-redirect-uris: ${AUTHORIZED_REDIRECT_URIS:http://localhost:3000/oauth2/redirect,http://localhost:8080/oauth2/redirect}

# 로깅 설정
logging:
  level:
    com.challkathon.demo: ${LOG_LEVEL:DEBUG}
    org.springframework.security: ${SECURITY_LOG_LEVEL:DEBUG}
    org.springframework.web: DEBUG
    org.hibernate.SQL: ${SQL_LOG_LEVEL:DEBUG}
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    org.springframework.transaction: DEBUG

# 서버 설정
server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: /
    encoding:
      charset: UTF-8
      enabled: true
      force: true

# Swagger 설정
springdoc:
  swagger-ui:
    path: /swagger-ui.html
    groups-order: DESC
    operationsSorter: method
    disable-swagger-default-url: true
    display-request-duration: true
  api-docs:
    path: /v3/api-docs
  default-consumes-media-type: application/json
  default-produces-media-type: application/json

---
# 개발 환경 설정
spring:
  config:
    activate:
      on-profile: dev
      
  # H2 데이터베이스 (개발용)
  datasource:
    url: jdbc:h2:mem:devdb
    driver-class-name: org.h2.Driver
    username: sa
    password: 
    
  h2:
    console:
      enabled: true
      path: /h2-console

  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true

jwt:
  access-token-expiration: 3600000    # 1시간
  refresh-token-expiration: 604800000 # 7일

logging:
  level:
    com.challkathon.demo: DEBUG

---
# 운영 환경 설정
spring:
  config:
    activate:
      on-profile: prod

  datasource:
    url: ${DATABASE_URL:jdbc:mysql://localhost:3306/challkathon_prod}
    username: ${DATABASE_USERNAME:root}
    password: ${DATABASE_PASSWORD:password}

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false

jwt:
  access-token-expiration: 1800000    # 30분 (보안 강화)
  refresh-token-expiration: 2592000000 # 30일

logging:
  level:
    com.challkathon.demo: INFO
    org.springframework.security: WARN
    org.hibernate: WARN